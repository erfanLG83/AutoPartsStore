@model IEnumerable<AutoPartsStore.Infrastructure.ViewModels.Cart.CartProductModel>
@{
    ViewData["Title"] = "سبد خرید";
}
@section Head{ 
    <link href="/css/cart.css" rel="stylesheet" />
}
<div class="container">
    <div class="row">
        <div class="card col-12 cart-container">
            <div class="row">
                <div class="col-md-8 cart">
                    <div class="title">
                        <div class="row">
                            <div class="col">
                                <h4><b>سبد خرید</b></h4>
                            </div>
                            <div class="col align-self-center text-right text-muted">@Model.Count() محصول</div>
                        </div>
                    </div>
                    @foreach (var item in Model)
                    {
                        <div data-row-id="@item.Id" class="row border-top border-bottom">
                            <div class="row main align-items-center">
                                <div class="col-2"><img class="img-fluid" src="/img/@item.Image"></div>
                                <div class="col">
                                    <div class="row text-muted">@item.CategoryTitle</div>
                                    <div class="row">@item.Title</div>
                                </div>
                                <div class="col"> <a onclick="changeCount(@item.Id,@item.Price,-1)" href="#">-</a><a href="#" class="border">@item.Count</a><a onclick="changeCount(@item.Id,@item.Price)" href="#">+</a> </div>
                                <div class="col  product-total-price"><span>@item.Price.ToString("n0")</span>ریال <span onclick="removeProduct(@item.Id)" class="close">&#10005;</span></div>
                            </div>
                        </div>
                    }
                    <div class="back-to-shop d-none">
                        <button onclick="discardChanges()" class="btn btn-danger">لفو</button>
                        <button onclick="confirmChanges()" class="btn btn-success">ثبت تغییرات</button>
                    </div>
                </div>
                <div class="col-md-4 summary">
                    <div>
                        <h5><b>ثبت سفارش</b></h5>
                    </div>
                    <hr>
                    <div class="row">
                        <div class="col pl-0">@Model.Count()</div>
                        <div class="col text-right">@ViewBag.TotalPrice</div>
                    </div>
                    <form>
                        <p>نوع پرداخت</p> <select>
                            <option class="text-muted">پرداخت انلاین</option>
                            <option class="text-muted">پرداخت درب منزل</option>
                        </select>
                        <p>کد تخفیف</p> <input id="code" placeholder="کد تخفیف را وارد کنید">
                    </form>
                    <div class="row" style="border-top: 1px solid rgba(0,0,0,.1); padding: 2vh 0;">
                        <div class="col">مبلغ پرداختی</div>
                        <div class="col text-right">@ViewBag.TotalPrice</div>
                    </div> <button class="btn">ادامه</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts{ 
    <script>
        let baseCount = @Model.Count();
        function addCommas(nStr)
        {
            nStr += '';
            var rgx = /(\d+)(\d{3})/;
            while (rgx.test(nStr)) {
                nStr = nStr.replace(rgx, '$1' + ',' + '$2');
            }
            return nStr;
        }
        const changeList = {
            countChanges: [],
            removeChanges:[]
        };
        const showChangeButtons = () => {
            $('.back-to-shop').removeClass('d-none');
        }
        const hideChangeButtons = () => {
            $('.back-to-shop').addClass('d-none');
        }
        const changeCount = (id,price ,count = 1) => {
            let newCount;
            const baseCount = Number($(`div[data-row-id='${id}'] .border`).html());
            if (baseCount <= 1 && count === -1)
                return;
            const change = changeList.countChanges.find(e => e.id === id);
            if (change === undefined) {
                newCount = baseCount + count;
                changeList.countChanges.push({
                    id: id,
                    count: newCount,
                    baseCount: baseCount,
                    price: price
                });
            } else {
                newCount = change.count + count;
                changeList.countChanges.find(e => e.id === id).count = newCount;
            }
            $(`div[data-row-id='${id}'] .product-total-price span:first-child`).html(addCommas(newCount * price));
            $(`div[data-row-id='${id}'] .border`).html(newCount)
            showChangeButtons();
        }
        const confirmChanges = async () => {
            if (changeList.countChanges.length > 0) {
                const data = JSON.stringify(changeList.countChanges);
                await fetch('/cart/changecounts', {
                    method: "post",
                    body: data,
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }).then(response => response.json())
                    .then(d => {
                        console.log(d);
                        if (d.success === true) {
                            changeList.countChanges = [];
                        }
                        else
                            alert('مشکلی در هنگام ذخیره اطلاعات پیش اومد')
                    }).catch(err => console.log(err));
            }
            if (changeList.removeChanges.length > 0) {
                const data = JSON.stringify(changeList.removeChanges.map(c => c.id));
                 await fetch('/cart/changeremoves', {
                    method: "post",
                    body: data,
                    headers: {
                        'Content-Type': 'application/json'
                    }
                    }).then(response => response.json())
                    .then(d => {
                        console.log(d);
                        if (d.success === true) {
                            $('.cart-container .align-self-center.text-right.text-muted').html(baseCount - changeList.removeChanges.length);
                            baseCount = baseCount - changeList.removeChanges.length;
                            changeList.removeChanges = [];
                        }
                        else
                            alert('مشکلی در هنگام ذخیره اطلاعات پیش اومد')
                    }).catch(err => console.log(err));
                hideChangeButtons();
            }
        }
        const discardChanges = () => {
            if (changeList.countChanges.length > 0) {
                changeList.countChanges.forEach(change => {
                    $(`div[data-row-id='${change.id}'] .product-total-price span:first-child`).html(addCommas(change.baseCount * change.price));
                    $(`div[data-row-id='${change.id}'] .border`).html(change.baseCount);
                })
                changeList.countChanges = [];
            }
            if (changeList.removeChanges.length > 0) {
                changeList.removeChanges.forEach(change => {
                    document.querySelector('.cart-container .col-md-8.cart').innerHTML += change.html;
                });
                changeList.removeChanges = [];
            }
            hideChangeButtons();
        }
        const removeProduct = (id) => {
            const elem = document.querySelector(`div[data-row-id='${id}']`);
            changeList.removeChanges.push({
                id: id,
                html: elem.outerHTML
            });
            elem.remove();
            showChangeButtons();
        }
    </script>
}